= Open Digital Modular (ODM): Proposal for a Synthesizer Architecture
:numbered:
:toc:
:toclevels: 3
:toc-placement!:
:pageunits: mm
:imagesdir: ./images

Copyright 2015-2018 Errsu.

This documentation describes Open Hardware and is licensed under CERN OHL v. 1.2
(the "CERN OHL"). You may redistribute and modify this documentation under
the terms of the CERN OHL (http://ohwr.org/cernohl).
This documentation is distributed
WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING OF
MERCHANTABILITY, SATISFACTORY QUALITY AND FITNESS FOR A
PARTICULAR PURPOSE. Please see the CERN OHL for applicable conditions.

Any software, firmware and script code in this documentation is
licensed under the Apache License, Version 2.0 (the " Apache License").
You may not use the code in this document except in compliance with the
Apache License. You may obtain a copy of the Apache License at
http://www.apache.org/licenses/LICENSE-2.0.
Unless required by applicable law or agreed to in writing, software
distributed under the Apache License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Apache License text for the specific language governing permissions and
limitations under the Apache License.

Additionally, all drawings and photographs of this document are licensed under
a Creative Commons Attribution-ShareAlike 4.0 International License.

image:https://i.creativecommons.org/l/by-sa/4.0/88x31.png[] See http://creativecommons.org/licenses/by-sa/4.0/.


toc::[]

== An unexpected finding

At Ableton Loop 2015, in a state of total euphoria due to the
forthcoming first Push2 release, I had the chance to play around a bit
with the SynthKit, which littleBits had developed together with KORG.

The links between their modules are all analog,
although most of the modules themselves are implemented using small
microcontrollers doing some DSP. The analog nature of
the network created problems: hum by unavoidable ground and
power loops, interferences with the servo, etc.

Later I looked for other newly created modular systems, if they are digital.
A longer internet search revealed something like the Mungo, which is purely
digital and declares itself as modular, but actually is not.
It's seemingly just another virtual modular synthesizer - closed systems with
a modular datamodel, but no actually accessible module interfaces.
They are patchable, but not modular in the sense that modules from different
makers and manufacturers can interact. Another system I don't remember claimed
to be digital and modular, but was never documented. Patchblocks is new
and digital, but uses analog time-encoded signals between the modules.

So it totally struck me that there was no system with digital links.

Then in 2016 I visited the SUPERBOOTH16 trade show, looking again for such
digitally linked systems. What I saw was an impressive amount of new people
and companies providing modules compatible to the classical analog Moog or
Doepfer Eurorack architecture. The wave of DIY activities fed by the availability
of powerful cheap microcontrollers and easy access to technologies like PCB
manufacturing or small-series mechanical parts and housings was impressive.

There is definitely a big power in the modular idea, with many people competing
in the field with new ideas. I was ensured that a digital interface standard
would fit well into this current movement.

So, being a total newbie to the world of modular synths,
I sketched a digital link technology, developed some prototype
hardware and software, solved a few puzzling issues, having
a working link prototype by end of 2016.

Unfortunately, I was distracted by other tasks in 2017. They took longer
than expected, but are done now. So, I am back at the project.
The decision was to first publish what I have and then continue
on prototype implementation. Here is the result - a proposal for
an "Open Digital Modular" synthesizer architecture.

== ODM Architecture

=== Principles

Before detailing the actual proposal, here are some principles that guided the design.

==== Open

To have any chance to be adopted, a standard should be as open as possible:

- use standard hardware building blocks
  * ARM microcontrollers
  * affordable sample kits, possibly from various manufacturers
  * serial UARTs available in these microcontrollers
  * RS485 as electrical standard
  * USB for power supply and computer connections
  * 3.5 mm telephone jacks for digital links
- ADC/DAC gateways to fit into existing environments
- purely non-commercial project with
  an interface proposal and a bit prototype
  hardware and software
- open software and HW licenses

==== Digital

These principles constitute the essential differences of ODM compared to to existing systems:

- high-quality signals
  * high bandwidth
  * high SNR
- simplicity of implementation
  * single 5V power supply
  * no rocket-science electronics, no sensitive analog circuitry
  * DIY compliant
  * affordable
- convenient to use
  * stereo
  * MIDI and audio

==== Modular

The purpose of modularity is to support the combination of modules from different makers or manufacturers:

- no central clock
- distributed computing
- no software dependency
- use standard MIDI to signal events between modules
- floating point numbers with defined scales as audio and CV signals

=== Overview

An ODM system looks very much like an analog one, just that all links between modules are digital.

.ODM system architecture
image::architecture_overview.png[width=450]

=== ODM link

The ODM link transports a 96kHz floating point stereo audio pair (which also
might be interpreted as CV), sample by sample, together with a MIDI signal.

.ODM link
image::odm_link.png[width=295]

The receiver knows if a cable is plugged in and data is received.
The sender does not know this.

Up to 6 ins and 6 outs per module are realistic, for example using
the built-in USARTS of STM32F7 microcontrollers. 2 ins and 2 outs are
no problem with STM32F4 MCUs (see prototypes below).

One-to-many links are possible from conceptual point of view,
but to be verified electrically.
Most likely it won't work due to termination issues.
Needs test. An active repeater could be possible, but
the cheaper way is probably to have two or more driver ICs
at one MCU USART output for a split.

Many-to-one links are not possible, conceptually.

Feedback loops are no problem.

=== Typical module structure

The structure of each ODM module is very similar to analog modules.

.Typical module structure
image::internal_module_structure.png[width=290]

=== Sample clock synchronization

- no global sample clock
- the output of the sender is synchronous to the sample clock ticks
  driving its audio engine
- the receiver resamples the incoming sample sequence to
  adapt the signal to its own clock (see "<<clock-adaptation>>" below)
- each link has 4 samples (41 μs) latency needed for clock synchronization
- the synchronization was tested with up to 10ppm CPU clock deviation,
  which should be sufficient for quartz-derived clocks
- TODO: calculate / test maximum allowed CPU clock deviation

.Sample clock synchronization
image::sample_clock_sync.png[width=215]


=== Beat sync and tempo data

For a beat and tempo synchronization, all relevant modules
must be input-connected to the MIDI clock. Unlike with
computers, the MIDI ticks timing can be as precise as 10 μs.

.Synchronization via MIDI
image::sync_via_midi.png[width=355]

Another solution would be a sync via the USBHost links,
e.g. by sending a message containing song beat time and tempo
each millisecond, with a much better resulting phase synchronization
than in computers with MIDI tempo detection.

=== Bundling Audio/CV and MIDI

To understand the advantages of transporting audio/CV and MIDI
together on a single link, we compare the typical analog synthesizer
structure with those of an ODM synth.

With an analog synth, the pitch and gate CV signals need to
be routed separately and in parallel with the audio signals
to the modules that consume them.

.Analog synthesizer structure
image::analog_synth_structure.png[width=335]

In an ODM synth, the MIDI events and the generated CV/audio
remain linked both topologically and timing-wise.
The ADSRs would typically be merged into the filter and VCA modules,
so that a single input is totally sufficient for them.
Of course, a multi-path structure is still possible if desired.

.ODM synthesizer structure
image::odm_synth_structure.png[width=450]

=== Polyphony

The polyphony problem is not solved in this architecture,
although with digital links and MIDI bundling a few things
could be possible. Comments are welcome.

=== Power supply

One or more USB 2.0 hubs provide 5V 500mA power to the modules:

.Power supply
image::power_supply.png[width=370]

Small microcontrollers are usually not USB 3.0 ready. 2.5W are
sufficient for most digital modules even including displays.
In the future, USB 3.0 and USB Type-C connectors will provide
4.5W resp. 15W without creating an architectural incompatibility.

=== Save and restore

Saving and restoring module settings (presets) from/to a computer
works via the ODM host protocol running over the same USB hub
which powers the modules.

The modules could be identified by their USB address (temporarily)
or by user assigned addresses (permanently).

The protocol should be JSON based with well-defined
but extensible object formats.

On the module side, the typical serial-via-USB debug
interface of prototype boards could be used. This would also allow
to reprogram generic modules from the host.

For state saving, the typical 115200 bits/sec should be sufficient.

Audio preset loading onto modules should be analyzed.
The typical audio memory of small MCUs is in ranges of 1-8 MBytes.
For load times of 1-10 seconds a bit rate of at least 10 MBit/s
would be required, which is OK for USB but not for the serial-via-USB
links of many prototyping boards. Audio loading over ODM links
could be an option.

.Save and restore
image::save_restore.png[width=300]

=== Peripherals

Below a few options for peripheral modules are listed.

==== Audio I/O

===== Direct analog I/O using a dedicated ADC/DAC module
  * advantage: very low latency

.Direct audio I/O
image::direct_audio_io.png[width=310]

===== Analog I/O via the host
  * disadvantage: high latency
  * advantage: no extra analog HW needed
  * the host could also do recording and playback in this setup.

IMPORTANT: In my notes I'm writing here "Killer App: Sequential Polyphony".
What did I think about? How does polyphony fit in here? Automatic overdubbing?
Multiple modules in a row overlaying their audio? Polyphonic oscillators combined with monophonic VCAs and filters?

.USB audio I/O
image::usb_audio_io.png[width=450]

===== Pure digital I/O via the host
  * same as before, with USB I/O hardware
  * not limited to analog I/Os of the host
  * otherwise, same pros and cons

.Pure USB I/O
image::pure_usb_io.png[width=450]


==== MIDI I/O

- via MIDI I/O module

.Direct MIDI I/O
image::direct_midi_io.png[width=325]

- via USB from/to host
same as pure digital I/O

==== Diagnostic module

A diagnostic module could have kind of an oscilloscope to
show the waveform and spectrum of the input signal,
as well as lists of received MIDI.

.Diagnostic module
image::diagnostic_module.png[width=270]

==== All-in-one peripheral module

An all-in-one peripheral module could easily contain audio and
MIDI I/O as well as a screen for diagnostics.

== ODM link protocol
=== Application layer
==== Stereo audio/CV
- 2 channels of 96000 samples/sec
- samples are 32 bit floating point numbers
- interpreted as audio:
  * amplitude range of +
    -1.0 ... +1.0 => 0dB signal +
    -0.1 ... +0.1 => -20dB signal
  * should be bandwidth-limited to 20Hz...20kHz
    before converting into analog
- interpreted as control voltage (CV)
+
NOTE: The signal modulation topic needs more investigation.
Possibly, we should just emulate analog systems, with the
difference, that 1.0 is used as the "neutral one" of
multiplicative functions, and 0.0 is the "neutral zero"
of additive functions.
An CV - ODM link gateway could convert typical
voltages of -5V...+5V into -1.0 ... +1.0 floating point values.
+
  * as multiplicative signal modulation: linear scale +
    +1.0 => signal unchanged +
     0.0 => signal is killed +
    -1.0 => signal inverted (?)
  * as additive signal modulation: linear scale +
     0.0 => signal unchanged +
     1.0 => signal is emphasized +
    -1.0 => signal is reduced
  * for effect modulation: linear scale +
    -1.0 => inverse effect on signal +
     0.0 => no effect on signal +
    +1.0 => normal effect on signal +
  * as relative pitch: logarithmic scale to the frequency +
    a delta of +1.0 => 1 octave up (1200 cents) +
    +0.8333 (i.e. 1/12) => 1 semitone up (100 cents)
  * as absolute pitch:
+
----
    f = 27.5 * exp(0.69314718 * v)
    v = 1.442695 * log(f) - 4.7813596
    v = (m - 21) / 12
    m = 21 + (12 * v)

      with f - frequency in Hz
           v - ODM link float value
           m - MIDI note number
           exp - exponential function (base e)
           log - natural logarithm (base e)
----
+
.Absolute pitch CV example values
[cols="^30%,^35%,^15%,^20%",options="header",width="60%"]
|===
| ODM link float value | Frequency (Hz)  | Note name  | MIDI note number
| -1.75    | 8.1758 Hz | C-1 |   0
| -1.0     |  13.75 Hz | A-1 |   9
|  0.0     |   27.5 Hz | A0  |  21
| +1.0     |     55 Hz | A1  |  33
| +2.0     |    110 Hz | A2  |  45
| +3.0     |    220 Hz | A3  |  57
| +3.0833  | 233.08 Hz | A#3 |  58
| +3.25    | 261.63 Hz | C4  |  60
| +4.0     |    440 Hz | A4  |  69
| +8.0     |   7040 Hz | A8  | 117
| +8.25    |   8372 Hz | C9  | 120
| +8.8333  |  12544 Hz | G9  | 127
|===


==== MIDI

The ODM link has an 8-bit side channel that transports a MIDI stream.
This should be perfectly normal standard MIDI including realtime
messages. Incoming MIDI is normally interpreted according to the modules function, as well as copied through to the output ODM link
that sends the resulting audio signal.

At the moment I see no use for sysex messages over this link,
and would even recommend not to use them, for they break
both realtime and compatibility between modules.

=== Transport layer
==== Serial protocol
- serial 8N1 protocol at 11250000 bits/sec +
  (frequency results from typically
   available UART bit rate dividers on STM32F CPUs)
- 9 consecutive bytes are sent per sample period,
  followed by a pause of 2.41666 μs (27 bits),
  which is used for frame synchronization
- bytes 0...3 are the left channel audio/CV signal
  (LSB first, IEEE-754 32 bit floating point)
- bytes 4...7 are the right channel, accordingly
- byte 8 is the MIDI channel (768 kbit/sec) +
  TODO: clarify if we need a special behavior for MIDI idle
- the protocol is robust to disconnections and reconnections

.ODM link protocol sample frame
image::odm_link_protocol.png[width=450]

[id="clock-adaptation"]
==== Sample clock adaptation
The only requirement of the protocol is that the sender sends out
the frames at its own sample clock ticks as precisely as possible. The receivers
way to sample this signal may vary.

In the ODM link prototype, the sender triggers the USART hardware
to send a sample frame at the beginning of its sample clock timer
interrupt. Then it starts calculating the next sample and finally
returns from the interrupt routine to wait for the next sample clock tick.

The ODM link receiver uses a high priority interrupt to receive sample frames.
The interrupt routine takes a timestamp to measure the sample clock phase
of the receiver in the senders sample sequence. In the prototype this is
done with a precision of 1/16th of the sample period. It is assumed that
both clocks have only a small deviation, therefore the receivers clock phase
moves slowly through the (assumed) senders sample tick times. So, a low pass
is applied to remove interrupt jitter from the measured clock phase.
When the receiver wants to access the senders current sample value,
the phase is used for a 3rd-order Hermite interpolation over
the last 4 samples received from that sender. This results in the
mentioned 41 μs latency per link.

=== Physical layer
Using standard (relatively fast, though) RS485 drivers. They transport a
symmetrical signal, the modules should be connected to a common ground
via the USB hub. The resistors at the TX side limit shortcut current
and reduce power consumption. The resistors on the RX side are
for line termination.

Q: What if a driver drives two receivers (one-to-many).
A: This probably won't work due to terminations in the wrong place.
Solution is to use an extra driver IC per output connection.

.ODM link physical layer
image::odm_link_physical_layer.png[width=335]

== ODM host protocol

The details of the USB protocol between the host and the modules still need to be defined. Here are just a few functions that seem useful.

=== Firmware update

For prototype CPU boards, there usually is a proprietary way to flash the
modules over an USB connection. For this purpose, the USB host connection
can be used by the tools of the CPU manufacturer.

For regular modules, a standardized ODM host protocol function
should be supported to allow in-system programming using a common
host software. This is very useful for generic, software-defined
modules, especially if they support DSP hacking by the user.

=== Save/Restore

For state saving, the host would poll the module state and save it into a file.
For restore, the state would be sent back to the respective modules first
and then activated by a second message sent to all modules simultaneously
(or, maybe, at a predefined beat time).

===== Endless rotation pots and momentary switches

These elements modify module state that is present only in software,
so it is lost when turning off the module. On the other side,
this state is easily restored by software.

Using the ODM host to save/restore these states frees the modules
from having own flash memory with possible wear-out issues. Also, the
coordinated save/restore of the whole system appears useful.

===== ODM link cables, normal pots, sliders, selectors and on-off switches

These elements retain their state when the modules are turned off,
which is useful and has some charm - turn the thing on and start
playing from the point where you left it yesterday.
On the other hand, restoring cannot be done by the software itself.

===== Assisted restore

The saving in this case would be like a printout of a computer program -
restore is a manual process, but all the information is there.

The host would bring the system into a state that assists the
user in restoring the state. Pots, sliders, selectors and switches
would give an audio feedback when operated to find the right positions.
LEDs and LCDs on the modules or elements could indicate where
something needs to be adjusted.

For the ODM links, if each input and output socket would have an LED
(which is useful anyway), the host could indicate which cables are to be
added or removed, one-by-one.

===== Network discovery

For the host to know which ODM link cables are placed, it could ask
all modules to put identifying floating point numbers on the outputs,
so that the inputs could determine and report to the host where they
are fed from. These floating point numbers could be "m + n/256" where
m is the module number assigned by the host and n the local ODM link
output socket number assigned by the module.

=== Network model

If the host would know about the structure of the module network of the
synthesizer (module functions and ODM links), it could represent
it to the user on a computer screen for discovery, diagnostics
and assisted restore.

=== Beat sync

The host could define a global beat time and send it down.
The problem to solve here is module latency compensation
along the signal path. If the modules would report their latencies
as part of the network discovery mentioned above, the host
could perform such a compensation.

== Prototyping

To develop the ODM link specification, a number of prototypes have been and will be built.
They are based on the STMicroelectronics STM32F series of ARM Cortex-M
processors with 32-bit floating point unit. For the sake of simplicity,
Nucleo-64 development boards are used. These are available for evaluation
(not for resale and not FCC approved), and they are very inexpensive.

.STM32F446RE Nucleo and STM32F746G Discovery evaluation boards
image::stm32f_evaluation_boards.png[]

After a breadboard prototype, a hand-wired stripboard prototype was built.
Finally, a two-sided PCB was designed. These efforts are ongoing.

Two different modules are being developed.

=== Module one ("ODM m1")
This is a generic ODM module. It is based on the 180MHz
STM32F446RE ARM Cortex-M4F processor on the NUCLEO-F446RE
evaluation board.

- ODM links: 2 ins, 2 outs
- control elements: 4 pots, 4 buttons
- indicators: 4 button LEDs, 9 LEDs line


.ODM m1 stripboard prototype
image::odm_m1_veroboard.png[]

.ODM m1 PCB
image::odm_m1_pcb.png[width=512]

=== Diagnostic module ("ODM dm")
This is a generic I/O module with some debugging facilities.
It uses a 216 MHz STM32F746NGH6 ARM Cortex-M7F processor on the
STM32F746G Discovery evaluation board.

- ODM links: 1 in, 1 out
- analog audio in/out
- color TFT screen with touch to be used as oscilloscope
- future option: MIDI in

.ODM dm stripboard prototype
image::odm_dm_veroboard.png[]

=== Host SW
The development has not begun. The planned functions are:

- SW diagnostics (printf)
- preset save/restore
- m1/dm software update
- beat sync

=== Software development / building blocks

The prototype software for the STM32F processors was developed in
ANSI-C using the free System Workbench for STM32 IDE, which can be downloaded
from http://www.openstm32.org/HomePage. It includes compiler, debugger
and a programmer which uses the USB link of the evaluation boards.

==== Which library to use to access the hardware

The selection of an API to access the processor peripherals was a complex task.

STMicro offers basically two high level libraries to work with their processors:
the older Standard Peripheral Libraries (SPL) and the newer STM32Cube with
Hardware Abstraction Layer (HAL). Back in 2016 the STM32Cube was new and the SPL
deprecated. Many users complained about bugs and immaturity of the HAL and
wanted to keep using the SPL, so STMicro set the SPL status back to active,
which it still is. And then there is CMSIS, an ARM-driven compatibility
layer, which actually creates compatibility in the core APIs only, not for the
manufacturer-specific peripherals.

So, I started using the HAL and found out two things.

First, HAL is very generic and inefficient, an order of magnitude slower
than what the hardware could do and what this projects needs.
Probably I did not use all possible optimizations and speedups.
But that was not the main issue.

The second and more important thing was, that all terms, function
and parameter names had nothing to do with how the things were called
or organized in the hardware datasheets and manuals.
I stepped through my first working, functionally correct but much too
slow HAL-based code, noted what the HAL actually did and compressed
that to the actual access to the hardware, only using the constants and
data structures from the processor-specific CMSIS include file (like stm32f4xx.h),
which the HAL implementation was based on.
And suddenly it all made sense. I could simply read the hardware manuals
and setup the hardware accordingly. It was even more compact and better readable
than the HAL-based code.

Also looked at the SPL briefly, including some programming, and it was
not significantly different to HAL in the mentioned aspects.

So I stick to that: program the hardware using the stm32f7xx.h headers.
They are called "CMSIS Device Peripheral Access Layer Header File", btw.
If in doubt, I let the STM32Cube generate some code, e.g. for processor
clock setup, or step through the HAL libraries to learn what needs to be done.
But the main source of information is the quite well-written and highly correct
hardware documentation for the STM32F processors.

Of course, this creates a dependency to the particular processor
peripherals, but that seems to be unavoidable, given the high realtime
requirements of the project. In the end, only the USARTs, timers, interrupts
and DMA are needed for the ODM link implementation, so it's not too much
code to be adapted.

An advantage of this approach is that these few header files can be included
into the project, so no large library from STMicro needs to be installed.

An OS of any kind is not needed for the prototype boards at this point in time.

==== Reusable code

The ODM link transport layer implementation is a candidate for a
small library that could be integrated into existing synthesizer
modules to support ODM.

Its implementation has been published on
https://github.com/errsu/opendigitalmodular
together with the other prototype code of the m1 module.
